// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
  // directUrl = env("DIRECT_URL") // Used for migrations with Prisma Accelerate
}

// Enums
enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum PregnancyStage {
  FIRST_TRIMESTER
  SECOND_TRIMESTER
  THIRD_TRIMESTER
  POSTPARTUM
  NOT_PREGNANT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

enum AppointmentType {
  CONSULTATION
  CHECKUP
  EMERGENCY
  FOLLOW_UP
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

// Main User model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  role          UserRole  @default(PATIENT)
  firstName     String
  lastName      String
  phoneNumber   String?
  isActive      Boolean   @default(true)
  isVerified    Boolean   @default(false)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  profile       UserProfile?
  doctorProfile DoctorProfile?
  appointments  Appointment[]
  chatSessions  ChatSession[]
  sentMessages  ChatMessage[] @relation("UserSentMessages")
  mealPlans     MealPlan[]
  
  @@map("users")
  
}

// Patient/User Profile
model UserProfile {
  id                String          @id @default(cuid())
  userId            String          @unique
  
  // Personal Information
  age               Int?
  dateOfBirth       DateTime?
  heightCm          Float?
  weightKg          Float?
  bloodGroup        String?
  bmi               Float?
  maritalStatus     String?
  childrenCount     Int?
  occupation        String?
  dietaryPreference String?         // "Vegetarian", "Non-Vegetarian", "Vegan"
  exerciseHabits    String?         // "Daily", "Often", "Occasionally", "Never"
  sleepHours        Float?
  smoking           Boolean         @default(false)
  alcohol           Boolean         @default(false)
  
  // Pregnancy/Reproductive Information
  pregnancyStage    PregnancyStage? @default(NOT_PREGNANT)
  lastPeriodDate    DateTime?
  averageCycleLength Int?           @default(28)
  pastPregnancies   Int?            @default(0)
  miscarriages      Int?            @default(0)
  pregnancyType     String?         // "Natural", "IVF", "IUI"
  dueDate           DateTime?
  expectedDueDate   DateTime?
  doctorName        String?
  hospital          String?
  bloodPressure     String?
  sugarLevel        String?
  trimester         Int?
  complications     String?         // JSON array of complications
  
  // Health Preferences
  preferredLanguage String          @default("en")
  notificationTime  String?         // "08:00", "09:00", etc.
  stressLevel       String?         // "Low", "Medium", "High"
  sleepQuality      String?         // "Poor", "Fair", "Good", "Excellent"
  waterIntakeLiters Float?
  supportPreferences String?        // JSON array of preferences
  
  // Nutrition Information
  dietaryRestrictions String?       // JSON array of restrictions
  favoriteFoods     String?         // JSON array of foods
  deficiencies      String?         // JSON array of deficiencies
  supplements       String?         // JSON array of supplements
  
  // Family Support
  spouseName        String?
  spousePhone       String?
  spouseBloodGroup  String?
  familyHistory     String?         // JSON array of family medical history
  primaryCaregiverContact String?
  dependentsCount   Int?
  
  // Legacy/Additional fields
  emergencyContact  String?
  emergencyPhone    String?
  address           String?
  village           String?
  district          String?
  state             String?
  pincode           String?
  medicalHistory    String?         // JSON string for medical conditions
  allergies         String?         // JSON string for allergies
  currentMedications String?        // JSON string for current medications
  hasSmartphone     Boolean         @default(false)
  internetAccess    String?         // "good", "poor", "none"
  educationLevel    String?         // "none", "primary", "secondary", "higher"
  familyIncome      String?         // "below_poverty", "low", "middle", "high"
  
  profileCompleted  Boolean         @default(false)
  completionPercentage Int          @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relationships
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Doctor Profile
model DoctorProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  licenseNumber     String   @unique
  specialization    String
  qualification     String
  experience        Int      // years of experience
  hospitalName      String?
  clinicAddress     String?
  consultationFee   Float?
  availableSlots    String?  // JSON string for available time slots
  isVerified        Boolean  @default(false)
  rating            Float?   @default(0)
  totalRatings      Int      @default(0)
  bio               String?
  languages         String?  // JSON array of supported languages
  servesRuralAreas  Boolean  @default(false)
  telemedicineEnabled Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments      Appointment[]

  @@map("doctor_profiles")
}

// Appointments
model Appointment {
  id              String            @id @default(cuid())
  patientId       String
  doctorId        String
  appointmentDate DateTime
  appointmentTime String           // "09:00", "14:30", etc.
  duration        Int              @default(30) // minutes
  status          AppointmentStatus @default(SCHEDULED)
  type            AppointmentType   @default(CONSULTATION)
  reason          String?
  symptoms        String?          // JSON string
  diagnosis       String?
  prescription    String?          // JSON string
  notes           String?
  followUpDate    DateTime?
  fees            Float?
  isPaid          Boolean          @default(false)
  isOnline        Boolean          @default(true)
  meetingLink     String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relationships
  patient         User             @relation(fields: [patientId], references: [id])
  doctor          DoctorProfile    @relation(fields: [doctorId], references: [id])

  @@map("appointments")
}

// Chat Sessions
model ChatSession {
  id          String    @id @default(cuid())
  userId      String
  title       String?   @default("Health Consultation")
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]

  @@map("chat_sessions")
}

// Chat Messages
model ChatMessage {
  id              String      @id @default(cuid())
  sessionId       String
  userId          String
  role            MessageRole
  content         String
  metadata        String?     // JSON string for additional data like AI model used, etc.
  timestamp       DateTime    @default(now())

  // Relationships
  session         ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user            User        @relation("UserSentMessages", fields: [userId], references: [id])

  @@map("chat_messages")
}

// Health Tips/Articles (for personalized content)
model HealthContent {
  id              String   @id @default(cuid())
  title           String
  content         String
  category        String   // "nutrition", "exercise", "pregnancy", "general"
  targetAudience  String   // "pregnant", "postpartum", "general"
  language        String   @default("en")
  tags            String?  // JSON array of tags
  isActive        Boolean  @default(true)
  viewCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("health_content")
}

// Notifications
model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String
  type        String   // "appointment", "medication", "checkup", "general"
  isRead      Boolean  @default(false)
  isSent      Boolean  @default(false)
  scheduledFor DateTime?
  sentAt      DateTime?
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())

  @@map("notifications")
}

// FCM Device Tokens
model DeviceToken {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  deviceType  String   // "web", "android", "ios"
  deviceName  String?
  isActive    Boolean  @default(true)
  lastUsedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("device_tokens")
}

// Meal Plan - Main plan record for Meal Planner Service
model MealPlan {
  id          String    @id @default(cuid())
  userId      String
  title       String    @default("Daily Meal Plan")
  date        DateTime  @default(now())  // Date for which the meal plan is created
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestions MealSuggestion[]

  @@map("meal_plans")
  @@index([userId])
  @@index([date])
}

// Meal Suggestion - Individual meal suggestions for Meal Planner Service
model MealSuggestion {
  id          String    @id @default(cuid())
  mealPlanId  String
  type        MealType  // breakfast, lunch, dinner, snack
  content     String    // JSON string containing structured meal info
  // Content structure: { name, why, benefits, facts, steps }
  orderIndex  Int       @default(0)  // To maintain order (first suggestion, second suggestion)
  isSelected  Boolean   @default(false)  // User can mark which suggestion they prefer
  createdAt   DateTime  @default(now())

  // Relationships
  mealPlan    MealPlan  @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)

  @@map("meal_suggestions")
  @@index([mealPlanId])
  @@index([type])
}

// Broadcast Messages
model BroadcastMessage {
  id          String    @id @default(cuid())
  userId      String
  userName    String
  userAvatar  String?
  content     String
  imageUrl    String?
  edited      Boolean   @default(false)
  editedAt    DateTime?
  timestamp   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("broadcast_messages")
  @@index([userId])
  @@index([timestamp])
}

// System Configuration
model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}
